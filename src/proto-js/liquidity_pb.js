// source: liquidity.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tx_pb = require('./tx_pb.js');
goog.object.extend(proto, tx_pb);
var gogoproto_gogo_pb = require('./gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_proto_coin_pb = require('./cosmos_proto/coin_pb.js');
goog.object.extend(proto, cosmos_proto_coin_pb);
var protoc$gen$openapiv2_options_annotations_pb = require('./protoc-gen-openapiv2/options/annotations_pb.js');
goog.object.extend(proto, protoc$gen$openapiv2_options_annotations_pb);
goog.exportSymbol('proto.tendermint.liquidity.BatchPoolDepositMsg', null, global);
goog.exportSymbol('proto.tendermint.liquidity.BatchPoolSwapMsg', null, global);
goog.exportSymbol('proto.tendermint.liquidity.BatchPoolWithdrawMsg', null, global);
goog.exportSymbol('proto.tendermint.liquidity.LiquidityPool', null, global);
goog.exportSymbol('proto.tendermint.liquidity.LiquidityPoolBatch', null, global);
goog.exportSymbol('proto.tendermint.liquidity.LiquidityPoolMetadata', null, global);
goog.exportSymbol('proto.tendermint.liquidity.LiquidityPoolType', null, global);
goog.exportSymbol('proto.tendermint.liquidity.Params', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.LiquidityPoolType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.LiquidityPoolType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.LiquidityPoolType.displayName = 'proto.tendermint.liquidity.LiquidityPoolType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.Params.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.Params.displayName = 'proto.tendermint.liquidity.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.LiquidityPool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.LiquidityPool.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.LiquidityPool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.LiquidityPool.displayName = 'proto.tendermint.liquidity.LiquidityPool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.LiquidityPoolMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.LiquidityPoolMetadata.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.LiquidityPoolMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.LiquidityPoolMetadata.displayName = 'proto.tendermint.liquidity.LiquidityPoolMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.LiquidityPoolBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.LiquidityPoolBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.LiquidityPoolBatch.displayName = 'proto.tendermint.liquidity.LiquidityPoolBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.BatchPoolDepositMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.BatchPoolDepositMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.BatchPoolDepositMsg.displayName = 'proto.tendermint.liquidity.BatchPoolDepositMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.BatchPoolWithdrawMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.BatchPoolWithdrawMsg.displayName = 'proto.tendermint.liquidity.BatchPoolWithdrawMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.BatchPoolSwapMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.BatchPoolSwapMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.BatchPoolSwapMsg.displayName = 'proto.tendermint.liquidity.BatchPoolSwapMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.LiquidityPoolType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.LiquidityPoolType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPoolType.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolTypeIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minReserveCoinNum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxReserveCoinNum: jspb.Message.getFieldWithDefault(msg, 4, 0),
    description: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.LiquidityPoolType}
 */
proto.tendermint.liquidity.LiquidityPoolType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.LiquidityPoolType;
  return proto.tendermint.liquidity.LiquidityPoolType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.LiquidityPoolType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.LiquidityPoolType}
 */
proto.tendermint.liquidity.LiquidityPoolType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoolTypeIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinReserveCoinNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxReserveCoinNum(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.LiquidityPoolType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.LiquidityPoolType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPoolType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolTypeIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinReserveCoinNum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxReserveCoinNum();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 pool_type_index = 1;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.getPoolTypeIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolType} returns this
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.setPoolTypeIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolType} returns this
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 min_reserve_coin_num = 3;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.getMinReserveCoinNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolType} returns this
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.setMinReserveCoinNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 max_reserve_coin_num = 4;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.getMaxReserveCoinNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolType} returns this
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.setMaxReserveCoinNum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolType} returns this
 */
proto.tendermint.liquidity.LiquidityPoolType.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.Params.repeatedFields_ = [1,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    liquidityPoolTypesList: jspb.Message.toObjectList(msg.getLiquidityPoolTypesList(),
    proto.tendermint.liquidity.LiquidityPoolType.toObject, includeInstance),
    minInitDepositToPool: jspb.Message.getFieldWithDefault(msg, 2, ""),
    initPoolCoinMintAmount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    swapFeeRate: msg.getSwapFeeRate_asB64(),
    liquidityPoolCreationFeeList: jspb.Message.toObjectList(msg.getLiquidityPoolCreationFeeList(),
    cosmos_proto_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.Params}
 */
proto.tendermint.liquidity.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.Params;
  return proto.tendermint.liquidity.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.Params}
 */
proto.tendermint.liquidity.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.liquidity.LiquidityPoolType;
      reader.readMessage(value,proto.tendermint.liquidity.LiquidityPoolType.deserializeBinaryFromReader);
      msg.addLiquidityPoolTypes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinInitDepositToPool(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitPoolCoinMintAmount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSwapFeeRate(value);
      break;
    case 5:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addLiquidityPoolCreationFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLiquidityPoolTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tendermint.liquidity.LiquidityPoolType.serializeBinaryToWriter
    );
  }
  f = message.getMinInitDepositToPool();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInitPoolCoinMintAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSwapFeeRate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getLiquidityPoolCreationFeeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LiquidityPoolType liquidity_pool_types = 1;
 * @return {!Array<!proto.tendermint.liquidity.LiquidityPoolType>}
 */
proto.tendermint.liquidity.Params.prototype.getLiquidityPoolTypesList = function() {
  return /** @type{!Array<!proto.tendermint.liquidity.LiquidityPoolType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tendermint.liquidity.LiquidityPoolType, 1));
};


/**
 * @param {!Array<!proto.tendermint.liquidity.LiquidityPoolType>} value
 * @return {!proto.tendermint.liquidity.Params} returns this
*/
proto.tendermint.liquidity.Params.prototype.setLiquidityPoolTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tendermint.liquidity.LiquidityPoolType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tendermint.liquidity.LiquidityPoolType}
 */
proto.tendermint.liquidity.Params.prototype.addLiquidityPoolTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tendermint.liquidity.LiquidityPoolType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.Params} returns this
 */
proto.tendermint.liquidity.Params.prototype.clearLiquidityPoolTypesList = function() {
  return this.setLiquidityPoolTypesList([]);
};


/**
 * optional string min_init_deposit_to_pool = 2;
 * @return {string}
 */
proto.tendermint.liquidity.Params.prototype.getMinInitDepositToPool = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.Params} returns this
 */
proto.tendermint.liquidity.Params.prototype.setMinInitDepositToPool = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string init_pool_coin_mint_amount = 3;
 * @return {string}
 */
proto.tendermint.liquidity.Params.prototype.getInitPoolCoinMintAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.Params} returns this
 */
proto.tendermint.liquidity.Params.prototype.setInitPoolCoinMintAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes swap_fee_rate = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tendermint.liquidity.Params.prototype.getSwapFeeRate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes swap_fee_rate = 4;
 * This is a type-conversion wrapper around `getSwapFeeRate()`
 * @return {string}
 */
proto.tendermint.liquidity.Params.prototype.getSwapFeeRate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSwapFeeRate()));
};


/**
 * optional bytes swap_fee_rate = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSwapFeeRate()`
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.Params.prototype.getSwapFeeRate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSwapFeeRate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tendermint.liquidity.Params} returns this
 */
proto.tendermint.liquidity.Params.prototype.setSwapFeeRate = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin liquidity_pool_creation_fee = 5;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.tendermint.liquidity.Params.prototype.getLiquidityPoolCreationFeeList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_proto_coin_pb.Coin, 5));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.tendermint.liquidity.Params} returns this
*/
proto.tendermint.liquidity.Params.prototype.setLiquidityPoolCreationFeeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.Params.prototype.addLiquidityPoolCreationFee = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.Params} returns this
 */
proto.tendermint.liquidity.Params.prototype.clearLiquidityPoolCreationFeeList = function() {
  return this.setLiquidityPoolCreationFeeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.LiquidityPool.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.LiquidityPool.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.LiquidityPool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.LiquidityPool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPool.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    poolTypeIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reserveCoinDenomsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    reserveAccountAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    poolCoinDenom: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.LiquidityPool}
 */
proto.tendermint.liquidity.LiquidityPool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.LiquidityPool;
  return proto.tendermint.liquidity.LiquidityPool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.LiquidityPool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.LiquidityPool}
 */
proto.tendermint.liquidity.LiquidityPool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoolTypeIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addReserveCoinDenoms(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReserveAccountAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolCoinDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.LiquidityPool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.LiquidityPool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.LiquidityPool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPoolTypeIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getReserveCoinDenomsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getReserveAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPoolCoinDenom();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 pool_id = 1;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPool.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPool} returns this
 */
proto.tendermint.liquidity.LiquidityPool.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 pool_type_index = 2;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPool.prototype.getPoolTypeIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPool} returns this
 */
proto.tendermint.liquidity.LiquidityPool.prototype.setPoolTypeIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string reserve_coin_denoms = 3;
 * @return {!Array<string>}
 */
proto.tendermint.liquidity.LiquidityPool.prototype.getReserveCoinDenomsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tendermint.liquidity.LiquidityPool} returns this
 */
proto.tendermint.liquidity.LiquidityPool.prototype.setReserveCoinDenomsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tendermint.liquidity.LiquidityPool} returns this
 */
proto.tendermint.liquidity.LiquidityPool.prototype.addReserveCoinDenoms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.LiquidityPool} returns this
 */
proto.tendermint.liquidity.LiquidityPool.prototype.clearReserveCoinDenomsList = function() {
  return this.setReserveCoinDenomsList([]);
};


/**
 * optional string reserve_account_address = 4;
 * @return {string}
 */
proto.tendermint.liquidity.LiquidityPool.prototype.getReserveAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.LiquidityPool} returns this
 */
proto.tendermint.liquidity.LiquidityPool.prototype.setReserveAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string pool_coin_denom = 5;
 * @return {string}
 */
proto.tendermint.liquidity.LiquidityPool.prototype.getPoolCoinDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.LiquidityPool} returns this
 */
proto.tendermint.liquidity.LiquidityPool.prototype.setPoolCoinDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.LiquidityPoolMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.LiquidityPoolMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    poolCoinTotalSupply: (f = msg.getPoolCoinTotalSupply()) && cosmos_proto_coin_pb.Coin.toObject(includeInstance, f),
    reserveCoinsList: jspb.Message.toObjectList(msg.getReserveCoinsList(),
    cosmos_proto_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.LiquidityPoolMetadata}
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.LiquidityPoolMetadata;
  return proto.tendermint.liquidity.LiquidityPoolMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.LiquidityPoolMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.LiquidityPoolMetadata}
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 2:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setPoolCoinTotalSupply(value);
      break;
    case 3:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addReserveCoins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.LiquidityPoolMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.LiquidityPoolMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPoolCoinTotalSupply();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getReserveCoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 pool_id = 1;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolMetadata} returns this
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional cosmos.base.v1beta1.Coin pool_coin_total_supply = 2;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.getPoolCoinTotalSupply = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_proto_coin_pb.Coin, 2));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolMetadata} returns this
*/
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.setPoolCoinTotalSupply = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.LiquidityPoolMetadata} returns this
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.clearPoolCoinTotalSupply = function() {
  return this.setPoolCoinTotalSupply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.hasPoolCoinTotalSupply = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated cosmos.base.v1beta1.Coin reserve_coins = 3;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.getReserveCoinsList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_proto_coin_pb.Coin, 3));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolMetadata} returns this
*/
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.setReserveCoinsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.addReserveCoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.LiquidityPoolMetadata} returns this
 */
proto.tendermint.liquidity.LiquidityPoolMetadata.prototype.clearReserveCoinsList = function() {
  return this.setReserveCoinsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.LiquidityPoolBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.LiquidityPoolBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPoolBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    batchIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    beginHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    depositMsgIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    withdrawMsgIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    swapMsgIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.LiquidityPoolBatch}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.LiquidityPoolBatch;
  return proto.tendermint.liquidity.LiquidityPoolBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.LiquidityPoolBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.LiquidityPoolBatch}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBatchIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBeginHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositMsgIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWithdrawMsgIndex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSwapMsgIndex(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.LiquidityPoolBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.LiquidityPoolBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPoolBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBatchIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBeginHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDepositMsgIndex();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getWithdrawMsgIndex();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSwapMsgIndex();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional uint64 pool_id = 1;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolBatch} returns this
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 batch_index = 2;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.getBatchIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolBatch} returns this
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.setBatchIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 begin_height = 3;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.getBeginHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolBatch} returns this
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.setBeginHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 deposit_msg_index = 4;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.getDepositMsgIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolBatch} returns this
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.setDepositMsgIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 withdraw_msg_index = 5;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.getWithdrawMsgIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolBatch} returns this
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.setWithdrawMsgIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 swap_msg_index = 6;
 * @return {number}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.getSwapMsgIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolBatch} returns this
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.setSwapMsgIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool executed = 7;
 * @return {boolean}
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolBatch} returns this
 */
proto.tendermint.liquidity.LiquidityPoolBatch.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.BatchPoolDepositMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.BatchPoolDepositMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msgIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    succeeded: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    toBeDeleted: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    msg: (f = msg.getMsg()) && tx_pb.MsgDepositToLiquidityPool.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.BatchPoolDepositMsg;
  return proto.tendermint.liquidity.BatchPoolDepositMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.BatchPoolDepositMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgIndex(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSucceeded(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setToBeDeleted(value);
      break;
    case 6:
      var value = new tx_pb.MsgDepositToLiquidityPool;
      reader.readMessage(value,tx_pb.MsgDepositToLiquidityPool.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.BatchPoolDepositMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.BatchPoolDepositMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMsgIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSucceeded();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getToBeDeleted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      tx_pb.MsgDepositToLiquidityPool.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 msg_height = 1;
 * @return {number}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.getMsgHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.setMsgHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 msg_index = 2;
 * @return {number}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.getMsgIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.setMsgIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool executed = 3;
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool succeeded = 4;
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.getSucceeded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.setSucceeded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool to_be_deleted = 5;
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.getToBeDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.setToBeDeleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional MsgDepositToLiquidityPool msg = 6;
 * @return {?proto.tendermint.liquidity.MsgDepositToLiquidityPool}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.getMsg = function() {
  return /** @type{?proto.tendermint.liquidity.MsgDepositToLiquidityPool} */ (
    jspb.Message.getWrapperField(this, tx_pb.MsgDepositToLiquidityPool, 6));
};


/**
 * @param {?proto.tendermint.liquidity.MsgDepositToLiquidityPool|undefined} value
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg} returns this
*/
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolDepositMsg.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.BatchPoolWithdrawMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msgIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    succeeded: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    toBeDeleted: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    msg: (f = msg.getMsg()) && tx_pb.MsgWithdrawFromLiquidityPool.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.BatchPoolWithdrawMsg;
  return proto.tendermint.liquidity.BatchPoolWithdrawMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgIndex(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSucceeded(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setToBeDeleted(value);
      break;
    case 6:
      var value = new tx_pb.MsgWithdrawFromLiquidityPool;
      reader.readMessage(value,tx_pb.MsgWithdrawFromLiquidityPool.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.BatchPoolWithdrawMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMsgIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSucceeded();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getToBeDeleted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      tx_pb.MsgWithdrawFromLiquidityPool.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 msg_height = 1;
 * @return {number}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.getMsgHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.setMsgHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 msg_index = 2;
 * @return {number}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.getMsgIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.setMsgIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool executed = 3;
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool succeeded = 4;
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.getSucceeded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.setSucceeded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool to_be_deleted = 5;
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.getToBeDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.setToBeDeleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional MsgWithdrawFromLiquidityPool msg = 6;
 * @return {?proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.getMsg = function() {
  return /** @type{?proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool} */ (
    jspb.Message.getWrapperField(this, tx_pb.MsgWithdrawFromLiquidityPool, 6));
};


/**
 * @param {?proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool|undefined} value
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} returns this
*/
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolWithdrawMsg.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.BatchPoolSwapMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.BatchPoolSwapMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msgIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    executed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    succeeded: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    toBeDeleted: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    orderExpiryHeight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    exchangedOfferCoin: (f = msg.getExchangedOfferCoin()) && cosmos_proto_coin_pb.Coin.toObject(includeInstance, f),
    remainingOfferCoin: (f = msg.getRemainingOfferCoin()) && cosmos_proto_coin_pb.Coin.toObject(includeInstance, f),
    msg: (f = msg.getMsg()) && tx_pb.MsgSwap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.BatchPoolSwapMsg;
  return proto.tendermint.liquidity.BatchPoolSwapMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.BatchPoolSwapMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgIndex(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecuted(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSucceeded(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setToBeDeleted(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrderExpiryHeight(value);
      break;
    case 7:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setExchangedOfferCoin(value);
      break;
    case 8:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setRemainingOfferCoin(value);
      break;
    case 9:
      var value = new tx_pb.MsgSwap;
      reader.readMessage(value,tx_pb.MsgSwap.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.BatchPoolSwapMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.BatchPoolSwapMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMsgIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExecuted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSucceeded();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getToBeDeleted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getOrderExpiryHeight();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getExchangedOfferCoin();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getRemainingOfferCoin();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      tx_pb.MsgSwap.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 msg_height = 1;
 * @return {number}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.getMsgHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.setMsgHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 msg_index = 2;
 * @return {number}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.getMsgIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.setMsgIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool executed = 3;
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.getExecuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.setExecuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool succeeded = 4;
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.getSucceeded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.setSucceeded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool to_be_deleted = 5;
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.getToBeDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.setToBeDeleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int64 order_expiry_height = 6;
 * @return {number}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.getOrderExpiryHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.setOrderExpiryHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional cosmos.base.v1beta1.Coin exchanged_offer_coin = 7;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.getExchangedOfferCoin = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_proto_coin_pb.Coin, 7));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
*/
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.setExchangedOfferCoin = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.clearExchangedOfferCoin = function() {
  return this.setExchangedOfferCoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.hasExchangedOfferCoin = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional cosmos.base.v1beta1.Coin remaining_offer_coin = 8;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.getRemainingOfferCoin = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_proto_coin_pb.Coin, 8));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
*/
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.setRemainingOfferCoin = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.clearRemainingOfferCoin = function() {
  return this.setRemainingOfferCoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.hasRemainingOfferCoin = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional MsgSwap msg = 9;
 * @return {?proto.tendermint.liquidity.MsgSwap}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.getMsg = function() {
  return /** @type{?proto.tendermint.liquidity.MsgSwap} */ (
    jspb.Message.getWrapperField(this, tx_pb.MsgSwap, 9));
};


/**
 * @param {?proto.tendermint.liquidity.MsgSwap|undefined} value
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
*/
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg} returns this
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.BatchPoolSwapMsg.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 9) != null;
};


goog.object.extend(exports, proto.tendermint.liquidity);
