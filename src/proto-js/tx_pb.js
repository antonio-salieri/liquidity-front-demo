// source: tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('./gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var cosmos_proto_coin_pb = require('./cosmos_proto/coin_pb.js');
goog.object.extend(proto, cosmos_proto_coin_pb);
var protoc$gen$openapiv2_options_annotations_pb = require('./protoc-gen-openapiv2/options/annotations_pb.js');
goog.object.extend(proto, protoc$gen$openapiv2_options_annotations_pb);
goog.exportSymbol('proto.tendermint.liquidity.BaseReq', null, global);
goog.exportSymbol('proto.tendermint.liquidity.Fee', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgCreateLiquidityPool', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgDepositToLiquidityPool', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgSwap', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgSwapRequest', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgSwapResponse', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest', null, global);
goog.exportSymbol('proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse', null, global);
goog.exportSymbol('proto.tendermint.liquidity.PubKey', null, global);
goog.exportSymbol('proto.tendermint.liquidity.Signature', null, global);
goog.exportSymbol('proto.tendermint.liquidity.StdTx', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.MsgCreateLiquidityPool.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.MsgCreateLiquidityPool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgCreateLiquidityPool.displayName = 'proto.tendermint.liquidity.MsgCreateLiquidityPool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.displayName = 'proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.displayName = 'proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.MsgDepositToLiquidityPool.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.MsgDepositToLiquidityPool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgDepositToLiquidityPool.displayName = 'proto.tendermint.liquidity.MsgDepositToLiquidityPool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.displayName = 'proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.displayName = 'proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.displayName = 'proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.displayName = 'proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.displayName = 'proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgSwap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgSwap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgSwap.displayName = 'proto.tendermint.liquidity.MsgSwap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgSwapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgSwapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgSwapRequest.displayName = 'proto.tendermint.liquidity.MsgSwapRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.MsgSwapResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.MsgSwapResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.MsgSwapResponse.displayName = 'proto.tendermint.liquidity.MsgSwapResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.BaseReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.BaseReq.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.BaseReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.BaseReq.displayName = 'proto.tendermint.liquidity.BaseReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.Fee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.Fee.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.Fee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.Fee.displayName = 'proto.tendermint.liquidity.Fee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.PubKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.PubKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.PubKey.displayName = 'proto.tendermint.liquidity.PubKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.liquidity.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.Signature.displayName = 'proto.tendermint.liquidity.Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.StdTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.StdTx.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.StdTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.StdTx.displayName = 'proto.tendermint.liquidity.StdTx';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgCreateLiquidityPool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgCreateLiquidityPool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolCreatorAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    poolTypeIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reserveCoinDenomsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    depositCoinsList: jspb.Message.toObjectList(msg.getDepositCoinsList(),
    cosmos_proto_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPool}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgCreateLiquidityPool;
  return proto.tendermint.liquidity.MsgCreateLiquidityPool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgCreateLiquidityPool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPool}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolCreatorAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoolTypeIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addReserveCoinDenoms(value);
      break;
    case 4:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addDepositCoins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgCreateLiquidityPool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgCreateLiquidityPool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolCreatorAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPoolTypeIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getReserveCoinDenomsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getDepositCoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string pool_creator_address = 1;
 * @return {string}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.getPoolCreatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.setPoolCreatorAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 pool_type_index = 2;
 * @return {number}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.getPoolTypeIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.setPoolTypeIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string reserve_coin_denoms = 3;
 * @return {!Array<string>}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.getReserveCoinDenomsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.setReserveCoinDenomsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.addReserveCoinDenoms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.clearReserveCoinDenomsList = function() {
  return this.setReserveCoinDenomsList([]);
};


/**
 * repeated cosmos.base.v1beta1.Coin deposit_coins = 4;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.getDepositCoinsList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_proto_coin_pb.Coin, 4));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPool} returns this
*/
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.setDepositCoinsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.addDepositCoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgCreateLiquidityPool.prototype.clearDepositCoinsList = function() {
  return this.setDepositCoinsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseReq: (f = msg.getBaseReq()) && proto.tendermint.liquidity.BaseReq.toObject(includeInstance, f),
    msg: (f = msg.getMsg()) && proto.tendermint.liquidity.MsgCreateLiquidityPool.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest;
  return proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.liquidity.BaseReq;
      reader.readMessage(value,proto.tendermint.liquidity.BaseReq.deserializeBinaryFromReader);
      msg.setBaseReq(value);
      break;
    case 2:
      var value = new proto.tendermint.liquidity.MsgCreateLiquidityPool;
      reader.readMessage(value,proto.tendermint.liquidity.MsgCreateLiquidityPool.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tendermint.liquidity.BaseReq.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tendermint.liquidity.MsgCreateLiquidityPool.serializeBinaryToWriter
    );
  }
};


/**
 * optional BaseReq base_req = 1;
 * @return {?proto.tendermint.liquidity.BaseReq}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.getBaseReq = function() {
  return /** @type{?proto.tendermint.liquidity.BaseReq} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.BaseReq, 1));
};


/**
 * @param {?proto.tendermint.liquidity.BaseReq|undefined} value
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest} returns this
*/
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.setBaseReq = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest} returns this
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.clearBaseReq = function() {
  return this.setBaseReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.hasBaseReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MsgCreateLiquidityPool msg = 2;
 * @return {?proto.tendermint.liquidity.MsgCreateLiquidityPool}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.getMsg = function() {
  return /** @type{?proto.tendermint.liquidity.MsgCreateLiquidityPool} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.MsgCreateLiquidityPool, 2));
};


/**
 * @param {?proto.tendermint.liquidity.MsgCreateLiquidityPool|undefined} value
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest} returns this
*/
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest} returns this
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stdTx: (f = msg.getStdTx()) && proto.tendermint.liquidity.StdTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse;
  return proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.liquidity.StdTx;
      reader.readMessage(value,proto.tendermint.liquidity.StdTx.deserializeBinaryFromReader);
      msg.setStdTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStdTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tendermint.liquidity.StdTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional StdTx std_tx = 1;
 * @return {?proto.tendermint.liquidity.StdTx}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.prototype.getStdTx = function() {
  return /** @type{?proto.tendermint.liquidity.StdTx} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.StdTx, 1));
};


/**
 * @param {?proto.tendermint.liquidity.StdTx|undefined} value
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse} returns this
*/
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.prototype.setStdTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse} returns this
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.prototype.clearStdTx = function() {
  return this.setStdTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgCreateLiquidityPoolResponse.prototype.hasStdTx = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgDepositToLiquidityPool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgDepositToLiquidityPool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.toObject = function(includeInstance, msg) {
  var f, obj = {
    depositorAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    poolId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    depositCoinsList: jspb.Message.toObjectList(msg.getDepositCoinsList(),
    cosmos_proto_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPool}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgDepositToLiquidityPool;
  return proto.tendermint.liquidity.MsgDepositToLiquidityPool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgDepositToLiquidityPool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPool}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepositorAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 3:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addDepositCoins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgDepositToLiquidityPool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgDepositToLiquidityPool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepositorAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDepositCoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string depositor_address = 1;
 * @return {string}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.getDepositorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.setDepositorAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 pool_id = 2;
 * @return {number}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin deposit_coins = 3;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.getDepositCoinsList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_proto_coin_pb.Coin, 3));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPool} returns this
*/
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.setDepositCoinsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.addDepositCoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPool.prototype.clearDepositCoinsList = function() {
  return this.setDepositCoinsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseReq: (f = msg.getBaseReq()) && proto.tendermint.liquidity.BaseReq.toObject(includeInstance, f),
    poolId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msg: (f = msg.getMsg()) && proto.tendermint.liquidity.MsgDepositToLiquidityPool.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest;
  return proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.liquidity.BaseReq;
      reader.readMessage(value,proto.tendermint.liquidity.BaseReq.deserializeBinaryFromReader);
      msg.setBaseReq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 3:
      var value = new proto.tendermint.liquidity.MsgDepositToLiquidityPool;
      reader.readMessage(value,proto.tendermint.liquidity.MsgDepositToLiquidityPool.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tendermint.liquidity.BaseReq.serializeBinaryToWriter
    );
  }
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tendermint.liquidity.MsgDepositToLiquidityPool.serializeBinaryToWriter
    );
  }
};


/**
 * optional BaseReq base_req = 1;
 * @return {?proto.tendermint.liquidity.BaseReq}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.getBaseReq = function() {
  return /** @type{?proto.tendermint.liquidity.BaseReq} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.BaseReq, 1));
};


/**
 * @param {?proto.tendermint.liquidity.BaseReq|undefined} value
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest} returns this
*/
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.setBaseReq = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest} returns this
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.clearBaseReq = function() {
  return this.setBaseReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.hasBaseReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 pool_id = 2;
 * @return {number}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest} returns this
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional MsgDepositToLiquidityPool msg = 3;
 * @return {?proto.tendermint.liquidity.MsgDepositToLiquidityPool}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.getMsg = function() {
  return /** @type{?proto.tendermint.liquidity.MsgDepositToLiquidityPool} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.MsgDepositToLiquidityPool, 3));
};


/**
 * @param {?proto.tendermint.liquidity.MsgDepositToLiquidityPool|undefined} value
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest} returns this
*/
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest} returns this
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stdTx: (f = msg.getStdTx()) && proto.tendermint.liquidity.StdTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse;
  return proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.liquidity.StdTx;
      reader.readMessage(value,proto.tendermint.liquidity.StdTx.deserializeBinaryFromReader);
      msg.setStdTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStdTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tendermint.liquidity.StdTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional StdTx std_tx = 1;
 * @return {?proto.tendermint.liquidity.StdTx}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.prototype.getStdTx = function() {
  return /** @type{?proto.tendermint.liquidity.StdTx} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.StdTx, 1));
};


/**
 * @param {?proto.tendermint.liquidity.StdTx|undefined} value
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse} returns this
*/
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.prototype.setStdTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse} returns this
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.prototype.clearStdTx = function() {
  return this.setStdTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgDepositToLiquidityPoolResponse.prototype.hasStdTx = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.toObject = function(includeInstance, msg) {
  var f, obj = {
    withdrawerAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    poolId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    poolCoin: (f = msg.getPoolCoin()) && cosmos_proto_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool;
  return proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWithdrawerAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 3:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setPoolCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithdrawerAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPoolCoin();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string withdrawer_address = 1;
 * @return {string}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.getWithdrawerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.setWithdrawerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 pool_id = 2;
 * @return {number}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional cosmos.base.v1beta1.Coin pool_coin = 3;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.getPoolCoin = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_proto_coin_pb.Coin, 3));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool} returns this
*/
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.setPoolCoin = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool} returns this
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.clearPoolCoin = function() {
  return this.setPoolCoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.prototype.hasPoolCoin = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseReq: (f = msg.getBaseReq()) && proto.tendermint.liquidity.BaseReq.toObject(includeInstance, f),
    poolId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msg: (f = msg.getMsg()) && proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest;
  return proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.liquidity.BaseReq;
      reader.readMessage(value,proto.tendermint.liquidity.BaseReq.deserializeBinaryFromReader);
      msg.setBaseReq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 3:
      var value = new proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool;
      reader.readMessage(value,proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tendermint.liquidity.BaseReq.serializeBinaryToWriter
    );
  }
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool.serializeBinaryToWriter
    );
  }
};


/**
 * optional BaseReq base_req = 1;
 * @return {?proto.tendermint.liquidity.BaseReq}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.getBaseReq = function() {
  return /** @type{?proto.tendermint.liquidity.BaseReq} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.BaseReq, 1));
};


/**
 * @param {?proto.tendermint.liquidity.BaseReq|undefined} value
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest} returns this
*/
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.setBaseReq = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest} returns this
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.clearBaseReq = function() {
  return this.setBaseReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.hasBaseReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 pool_id = 2;
 * @return {number}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest} returns this
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional MsgWithdrawFromLiquidityPool msg = 3;
 * @return {?proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.getMsg = function() {
  return /** @type{?proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool, 3));
};


/**
 * @param {?proto.tendermint.liquidity.MsgWithdrawFromLiquidityPool|undefined} value
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest} returns this
*/
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest} returns this
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stdTx: (f = msg.getStdTx()) && proto.tendermint.liquidity.StdTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse;
  return proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.liquidity.StdTx;
      reader.readMessage(value,proto.tendermint.liquidity.StdTx.deserializeBinaryFromReader);
      msg.setStdTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStdTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tendermint.liquidity.StdTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional StdTx std_tx = 1;
 * @return {?proto.tendermint.liquidity.StdTx}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.prototype.getStdTx = function() {
  return /** @type{?proto.tendermint.liquidity.StdTx} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.StdTx, 1));
};


/**
 * @param {?proto.tendermint.liquidity.StdTx|undefined} value
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse} returns this
*/
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.prototype.setStdTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse} returns this
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.prototype.clearStdTx = function() {
  return this.setStdTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse.prototype.hasStdTx = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgSwap.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgSwap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgSwap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgSwap.toObject = function(includeInstance, msg) {
  var f, obj = {
    swapRequesterAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    poolId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    poolTypeIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    swapType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    offerCoin: (f = msg.getOfferCoin()) && cosmos_proto_coin_pb.Coin.toObject(includeInstance, f),
    demandCoinDenom: jspb.Message.getFieldWithDefault(msg, 6, ""),
    orderPrice: msg.getOrderPrice_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgSwap}
 */
proto.tendermint.liquidity.MsgSwap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgSwap;
  return proto.tendermint.liquidity.MsgSwap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgSwap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgSwap}
 */
proto.tendermint.liquidity.MsgSwap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwapRequesterAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoolTypeIndex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSwapType(value);
      break;
    case 5:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setOfferCoin(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDemandCoinDenom(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgSwap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgSwap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgSwap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgSwap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSwapRequesterAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPoolTypeIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSwapType();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOfferCoin();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getDemandCoinDenom();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOrderPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string swap_requester_address = 1;
 * @return {string}
 */
proto.tendermint.liquidity.MsgSwap.prototype.getSwapRequesterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.MsgSwap} returns this
 */
proto.tendermint.liquidity.MsgSwap.prototype.setSwapRequesterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 pool_id = 2;
 * @return {number}
 */
proto.tendermint.liquidity.MsgSwap.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.MsgSwap} returns this
 */
proto.tendermint.liquidity.MsgSwap.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 pool_type_index = 3;
 * @return {number}
 */
proto.tendermint.liquidity.MsgSwap.prototype.getPoolTypeIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.MsgSwap} returns this
 */
proto.tendermint.liquidity.MsgSwap.prototype.setPoolTypeIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 swap_type = 4;
 * @return {number}
 */
proto.tendermint.liquidity.MsgSwap.prototype.getSwapType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.MsgSwap} returns this
 */
proto.tendermint.liquidity.MsgSwap.prototype.setSwapType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional cosmos.base.v1beta1.Coin offer_coin = 5;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.MsgSwap.prototype.getOfferCoin = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_proto_coin_pb.Coin, 5));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.tendermint.liquidity.MsgSwap} returns this
*/
proto.tendermint.liquidity.MsgSwap.prototype.setOfferCoin = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgSwap} returns this
 */
proto.tendermint.liquidity.MsgSwap.prototype.clearOfferCoin = function() {
  return this.setOfferCoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgSwap.prototype.hasOfferCoin = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string demand_coin_denom = 6;
 * @return {string}
 */
proto.tendermint.liquidity.MsgSwap.prototype.getDemandCoinDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.MsgSwap} returns this
 */
proto.tendermint.liquidity.MsgSwap.prototype.setDemandCoinDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes order_price = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tendermint.liquidity.MsgSwap.prototype.getOrderPrice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes order_price = 7;
 * This is a type-conversion wrapper around `getOrderPrice()`
 * @return {string}
 */
proto.tendermint.liquidity.MsgSwap.prototype.getOrderPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderPrice()));
};


/**
 * optional bytes order_price = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderPrice()`
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgSwap.prototype.getOrderPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderPrice()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tendermint.liquidity.MsgSwap} returns this
 */
proto.tendermint.liquidity.MsgSwap.prototype.setOrderPrice = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgSwapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgSwapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgSwapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseReq: (f = msg.getBaseReq()) && proto.tendermint.liquidity.BaseReq.toObject(includeInstance, f),
    poolId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msg: (f = msg.getMsg()) && proto.tendermint.liquidity.MsgSwap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgSwapRequest}
 */
proto.tendermint.liquidity.MsgSwapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgSwapRequest;
  return proto.tendermint.liquidity.MsgSwapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgSwapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgSwapRequest}
 */
proto.tendermint.liquidity.MsgSwapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.liquidity.BaseReq;
      reader.readMessage(value,proto.tendermint.liquidity.BaseReq.deserializeBinaryFromReader);
      msg.setBaseReq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 3:
      var value = new proto.tendermint.liquidity.MsgSwap;
      reader.readMessage(value,proto.tendermint.liquidity.MsgSwap.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgSwapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgSwapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgSwapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tendermint.liquidity.BaseReq.serializeBinaryToWriter
    );
  }
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tendermint.liquidity.MsgSwap.serializeBinaryToWriter
    );
  }
};


/**
 * optional BaseReq base_req = 1;
 * @return {?proto.tendermint.liquidity.BaseReq}
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.getBaseReq = function() {
  return /** @type{?proto.tendermint.liquidity.BaseReq} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.BaseReq, 1));
};


/**
 * @param {?proto.tendermint.liquidity.BaseReq|undefined} value
 * @return {!proto.tendermint.liquidity.MsgSwapRequest} returns this
*/
proto.tendermint.liquidity.MsgSwapRequest.prototype.setBaseReq = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgSwapRequest} returns this
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.clearBaseReq = function() {
  return this.setBaseReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.hasBaseReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 pool_id = 2;
 * @return {number}
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.MsgSwapRequest} returns this
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional MsgSwap msg = 3;
 * @return {?proto.tendermint.liquidity.MsgSwap}
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.getMsg = function() {
  return /** @type{?proto.tendermint.liquidity.MsgSwap} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.MsgSwap, 3));
};


/**
 * @param {?proto.tendermint.liquidity.MsgSwap|undefined} value
 * @return {!proto.tendermint.liquidity.MsgSwapRequest} returns this
*/
proto.tendermint.liquidity.MsgSwapRequest.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgSwapRequest} returns this
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgSwapRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.MsgSwapResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.MsgSwapResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.MsgSwapResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgSwapResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stdTx: (f = msg.getStdTx()) && proto.tendermint.liquidity.StdTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.MsgSwapResponse}
 */
proto.tendermint.liquidity.MsgSwapResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.MsgSwapResponse;
  return proto.tendermint.liquidity.MsgSwapResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.MsgSwapResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.MsgSwapResponse}
 */
proto.tendermint.liquidity.MsgSwapResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.liquidity.StdTx;
      reader.readMessage(value,proto.tendermint.liquidity.StdTx.deserializeBinaryFromReader);
      msg.setStdTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.MsgSwapResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.MsgSwapResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.MsgSwapResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.MsgSwapResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStdTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tendermint.liquidity.StdTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional StdTx std_tx = 1;
 * @return {?proto.tendermint.liquidity.StdTx}
 */
proto.tendermint.liquidity.MsgSwapResponse.prototype.getStdTx = function() {
  return /** @type{?proto.tendermint.liquidity.StdTx} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.StdTx, 1));
};


/**
 * @param {?proto.tendermint.liquidity.StdTx|undefined} value
 * @return {!proto.tendermint.liquidity.MsgSwapResponse} returns this
*/
proto.tendermint.liquidity.MsgSwapResponse.prototype.setStdTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.MsgSwapResponse} returns this
 */
proto.tendermint.liquidity.MsgSwapResponse.prototype.clearStdTx = function() {
  return this.setStdTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.MsgSwapResponse.prototype.hasStdTx = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.BaseReq.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.BaseReq.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.BaseReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.BaseReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.BaseReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    memo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chainId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timeoutHeight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    feesList: jspb.Message.toObjectList(msg.getFeesList(),
    cosmos_proto_coin_pb.Coin.toObject, includeInstance),
    gasPricesList: jspb.Message.toObjectList(msg.getGasPricesList(),
    cosmos_proto_coin_pb.DecCoin.toObject, includeInstance),
    gas: jspb.Message.getFieldWithDefault(msg, 9, 0),
    gasAdjustment: jspb.Message.getFieldWithDefault(msg, 10, ""),
    simulate: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.BaseReq}
 */
proto.tendermint.liquidity.BaseReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.BaseReq;
  return proto.tendermint.liquidity.BaseReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.BaseReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.BaseReq}
 */
proto.tendermint.liquidity.BaseReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountNumber(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutHeight(value);
      break;
    case 7:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addFees(value);
      break;
    case 8:
      var value = new cosmos_proto_coin_pb.DecCoin;
      reader.readMessage(value,cosmos_proto_coin_pb.DecCoin.deserializeBinaryFromReader);
      msg.addGasPrices(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasAdjustment(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSimulate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.BaseReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.BaseReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.BaseReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.BaseReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAccountNumber();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTimeoutHeight();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getFeesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getGasPricesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      cosmos_proto_coin_pb.DecCoin.serializeBinaryToWriter
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getGasAdjustment();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSimulate();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.tendermint.liquidity.BaseReq.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string memo = 2;
 * @return {string}
 */
proto.tendermint.liquidity.BaseReq.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.tendermint.liquidity.BaseReq.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 account_number = 4;
 * @return {number}
 */
proto.tendermint.liquidity.BaseReq.prototype.getAccountNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 sequence = 5;
 * @return {number}
 */
proto.tendermint.liquidity.BaseReq.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 timeout_height = 6;
 * @return {number}
 */
proto.tendermint.liquidity.BaseReq.prototype.getTimeoutHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.setTimeoutHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin fees = 7;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.tendermint.liquidity.BaseReq.prototype.getFeesList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_proto_coin_pb.Coin, 7));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
*/
proto.tendermint.liquidity.BaseReq.prototype.setFeesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.BaseReq.prototype.addFees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.clearFeesList = function() {
  return this.setFeesList([]);
};


/**
 * repeated cosmos.base.v1beta1.DecCoin gas_prices = 8;
 * @return {!Array<!proto.cosmos.base.v1beta1.DecCoin>}
 */
proto.tendermint.liquidity.BaseReq.prototype.getGasPricesList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.DecCoin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_proto_coin_pb.DecCoin, 8));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.DecCoin>} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
*/
proto.tendermint.liquidity.BaseReq.prototype.setGasPricesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.DecCoin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.DecCoin}
 */
proto.tendermint.liquidity.BaseReq.prototype.addGasPrices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.cosmos.base.v1beta1.DecCoin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.clearGasPricesList = function() {
  return this.setGasPricesList([]);
};


/**
 * optional uint64 gas = 9;
 * @return {number}
 */
proto.tendermint.liquidity.BaseReq.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string gas_adjustment = 10;
 * @return {string}
 */
proto.tendermint.liquidity.BaseReq.prototype.getGasAdjustment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.setGasAdjustment = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool simulate = 11;
 * @return {boolean}
 */
proto.tendermint.liquidity.BaseReq.prototype.getSimulate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tendermint.liquidity.BaseReq} returns this
 */
proto.tendermint.liquidity.BaseReq.prototype.setSimulate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.Fee.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.Fee.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.Fee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.Fee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.Fee.toObject = function(includeInstance, msg) {
  var f, obj = {
    gas: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amountList: jspb.Message.toObjectList(msg.getAmountList(),
    cosmos_proto_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.Fee}
 */
proto.tendermint.liquidity.Fee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.Fee;
  return proto.tendermint.liquidity.Fee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.Fee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.Fee}
 */
proto.tendermint.liquidity.Fee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 2:
      var value = new cosmos_proto_coin_pb.Coin;
      reader.readMessage(value,cosmos_proto_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.Fee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.Fee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.Fee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.Fee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAmountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      cosmos_proto_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 gas = 1;
 * @return {number}
 */
proto.tendermint.liquidity.Fee.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.Fee} returns this
 */
proto.tendermint.liquidity.Fee.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin amount = 2;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.tendermint.liquidity.Fee.prototype.getAmountList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_proto_coin_pb.Coin, 2));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.tendermint.liquidity.Fee} returns this
*/
proto.tendermint.liquidity.Fee.prototype.setAmountList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.tendermint.liquidity.Fee.prototype.addAmount = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.Fee} returns this
 */
proto.tendermint.liquidity.Fee.prototype.clearAmountList = function() {
  return this.setAmountList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.PubKey.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.PubKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.PubKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.PubKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.PubKey}
 */
proto.tendermint.liquidity.PubKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.PubKey;
  return proto.tendermint.liquidity.PubKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.PubKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.PubKey}
 */
proto.tendermint.liquidity.PubKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.PubKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.PubKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.PubKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.PubKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.tendermint.liquidity.PubKey.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.PubKey} returns this
 */
proto.tendermint.liquidity.PubKey.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.tendermint.liquidity.PubKey.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.PubKey} returns this
 */
proto.tendermint.liquidity.PubKey.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pubKey: (f = msg.getPubKey()) && proto.tendermint.liquidity.PubKey.toObject(includeInstance, f),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.Signature}
 */
proto.tendermint.liquidity.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.Signature;
  return proto.tendermint.liquidity.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.Signature}
 */
proto.tendermint.liquidity.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.tendermint.liquidity.PubKey;
      reader.readMessage(value,proto.tendermint.liquidity.PubKey.deserializeBinaryFromReader);
      msg.setPubKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tendermint.liquidity.PubKey.serializeBinaryToWriter
    );
  }
  f = message.getAccountNumber();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string signature = 1;
 * @return {string}
 */
proto.tendermint.liquidity.Signature.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.Signature} returns this
 */
proto.tendermint.liquidity.Signature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PubKey pub_key = 2;
 * @return {?proto.tendermint.liquidity.PubKey}
 */
proto.tendermint.liquidity.Signature.prototype.getPubKey = function() {
  return /** @type{?proto.tendermint.liquidity.PubKey} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.PubKey, 2));
};


/**
 * @param {?proto.tendermint.liquidity.PubKey|undefined} value
 * @return {!proto.tendermint.liquidity.Signature} returns this
*/
proto.tendermint.liquidity.Signature.prototype.setPubKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.Signature} returns this
 */
proto.tendermint.liquidity.Signature.prototype.clearPubKey = function() {
  return this.setPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.Signature.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 account_number = 3;
 * @return {number}
 */
proto.tendermint.liquidity.Signature.prototype.getAccountNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.Signature} returns this
 */
proto.tendermint.liquidity.Signature.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 sequence = 4;
 * @return {number}
 */
proto.tendermint.liquidity.Signature.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.liquidity.Signature} returns this
 */
proto.tendermint.liquidity.Signature.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.StdTx.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.StdTx.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.StdTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.StdTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.StdTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    fee: (f = msg.getFee()) && proto.tendermint.liquidity.Fee.toObject(includeInstance, f),
    memo: jspb.Message.getFieldWithDefault(msg, 3, ""),
    signature: (f = msg.getSignature()) && proto.tendermint.liquidity.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.StdTx}
 */
proto.tendermint.liquidity.StdTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.StdTx;
  return proto.tendermint.liquidity.StdTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.StdTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.StdTx}
 */
proto.tendermint.liquidity.StdTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMsg(value);
      break;
    case 2:
      var value = new proto.tendermint.liquidity.Fee;
      reader.readMessage(value,proto.tendermint.liquidity.Fee.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 4:
      var value = new proto.tendermint.liquidity.Signature;
      reader.readMessage(value,proto.tendermint.liquidity.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.StdTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.StdTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.StdTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.StdTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tendermint.liquidity.Fee.serializeBinaryToWriter
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tendermint.liquidity.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string msg = 1;
 * @return {!Array<string>}
 */
proto.tendermint.liquidity.StdTx.prototype.getMsgList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tendermint.liquidity.StdTx} returns this
 */
proto.tendermint.liquidity.StdTx.prototype.setMsgList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tendermint.liquidity.StdTx} returns this
 */
proto.tendermint.liquidity.StdTx.prototype.addMsg = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.StdTx} returns this
 */
proto.tendermint.liquidity.StdTx.prototype.clearMsgList = function() {
  return this.setMsgList([]);
};


/**
 * optional Fee fee = 2;
 * @return {?proto.tendermint.liquidity.Fee}
 */
proto.tendermint.liquidity.StdTx.prototype.getFee = function() {
  return /** @type{?proto.tendermint.liquidity.Fee} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.Fee, 2));
};


/**
 * @param {?proto.tendermint.liquidity.Fee|undefined} value
 * @return {!proto.tendermint.liquidity.StdTx} returns this
*/
proto.tendermint.liquidity.StdTx.prototype.setFee = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.StdTx} returns this
 */
proto.tendermint.liquidity.StdTx.prototype.clearFee = function() {
  return this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.StdTx.prototype.hasFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string memo = 3;
 * @return {string}
 */
proto.tendermint.liquidity.StdTx.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tendermint.liquidity.StdTx} returns this
 */
proto.tendermint.liquidity.StdTx.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Signature signature = 4;
 * @return {?proto.tendermint.liquidity.Signature}
 */
proto.tendermint.liquidity.StdTx.prototype.getSignature = function() {
  return /** @type{?proto.tendermint.liquidity.Signature} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.liquidity.Signature, 4));
};


/**
 * @param {?proto.tendermint.liquidity.Signature|undefined} value
 * @return {!proto.tendermint.liquidity.StdTx} returns this
*/
proto.tendermint.liquidity.StdTx.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.StdTx} returns this
 */
proto.tendermint.liquidity.StdTx.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.StdTx.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.tendermint.liquidity);
