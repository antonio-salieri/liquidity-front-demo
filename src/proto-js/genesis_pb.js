// source: genesis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var liquidity_pb = require('./liquidity_pb.js');
goog.object.extend(proto, liquidity_pb);
var gogoproto_gogo_pb = require('./gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.tendermint.liquidity.GenesisState', null, global);
goog.exportSymbol('proto.tendermint.liquidity.LiquidityPoolRecord', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.LiquidityPoolRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.LiquidityPoolRecord.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.LiquidityPoolRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.LiquidityPoolRecord.displayName = 'proto.tendermint.liquidity.LiquidityPoolRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.liquidity.GenesisState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.liquidity.GenesisState.repeatedFields_, null);
};
goog.inherits(proto.tendermint.liquidity.GenesisState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.liquidity.GenesisState.displayName = 'proto.tendermint.liquidity.GenesisState';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.LiquidityPoolRecord.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.LiquidityPoolRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.LiquidityPoolRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPoolRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    liquidityPool: (f = msg.getLiquidityPool()) && liquidity_pb.LiquidityPool.toObject(includeInstance, f),
    liquidityPoolMetadata: (f = msg.getLiquidityPoolMetadata()) && liquidity_pb.LiquidityPoolMetadata.toObject(includeInstance, f),
    liquidityPoolBatch: (f = msg.getLiquidityPoolBatch()) && liquidity_pb.LiquidityPoolBatch.toObject(includeInstance, f),
    batchPoolDepositMsgsList: jspb.Message.toObjectList(msg.getBatchPoolDepositMsgsList(),
    liquidity_pb.BatchPoolDepositMsg.toObject, includeInstance),
    batchPoolWithdrawMsgsList: jspb.Message.toObjectList(msg.getBatchPoolWithdrawMsgsList(),
    liquidity_pb.BatchPoolWithdrawMsg.toObject, includeInstance),
    batchPoolSwapMsgsList: jspb.Message.toObjectList(msg.getBatchPoolSwapMsgsList(),
    liquidity_pb.BatchPoolSwapMsg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.LiquidityPoolRecord;
  return proto.tendermint.liquidity.LiquidityPoolRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.LiquidityPoolRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liquidity_pb.LiquidityPool;
      reader.readMessage(value,liquidity_pb.LiquidityPool.deserializeBinaryFromReader);
      msg.setLiquidityPool(value);
      break;
    case 2:
      var value = new liquidity_pb.LiquidityPoolMetadata;
      reader.readMessage(value,liquidity_pb.LiquidityPoolMetadata.deserializeBinaryFromReader);
      msg.setLiquidityPoolMetadata(value);
      break;
    case 3:
      var value = new liquidity_pb.LiquidityPoolBatch;
      reader.readMessage(value,liquidity_pb.LiquidityPoolBatch.deserializeBinaryFromReader);
      msg.setLiquidityPoolBatch(value);
      break;
    case 4:
      var value = new liquidity_pb.BatchPoolDepositMsg;
      reader.readMessage(value,liquidity_pb.BatchPoolDepositMsg.deserializeBinaryFromReader);
      msg.addBatchPoolDepositMsgs(value);
      break;
    case 5:
      var value = new liquidity_pb.BatchPoolWithdrawMsg;
      reader.readMessage(value,liquidity_pb.BatchPoolWithdrawMsg.deserializeBinaryFromReader);
      msg.addBatchPoolWithdrawMsgs(value);
      break;
    case 6:
      var value = new liquidity_pb.BatchPoolSwapMsg;
      reader.readMessage(value,liquidity_pb.BatchPoolSwapMsg.deserializeBinaryFromReader);
      msg.addBatchPoolSwapMsgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.LiquidityPoolRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.LiquidityPoolRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.LiquidityPoolRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLiquidityPool();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      liquidity_pb.LiquidityPool.serializeBinaryToWriter
    );
  }
  f = message.getLiquidityPoolMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      liquidity_pb.LiquidityPoolMetadata.serializeBinaryToWriter
    );
  }
  f = message.getLiquidityPoolBatch();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      liquidity_pb.LiquidityPoolBatch.serializeBinaryToWriter
    );
  }
  f = message.getBatchPoolDepositMsgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      liquidity_pb.BatchPoolDepositMsg.serializeBinaryToWriter
    );
  }
  f = message.getBatchPoolWithdrawMsgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      liquidity_pb.BatchPoolWithdrawMsg.serializeBinaryToWriter
    );
  }
  f = message.getBatchPoolSwapMsgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      liquidity_pb.BatchPoolSwapMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional LiquidityPool liquidity_pool = 1;
 * @return {?proto.tendermint.liquidity.LiquidityPool}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.getLiquidityPool = function() {
  return /** @type{?proto.tendermint.liquidity.LiquidityPool} */ (
    jspb.Message.getWrapperField(this, liquidity_pb.LiquidityPool, 1));
};


/**
 * @param {?proto.tendermint.liquidity.LiquidityPool|undefined} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
*/
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.setLiquidityPool = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.clearLiquidityPool = function() {
  return this.setLiquidityPool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.hasLiquidityPool = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LiquidityPoolMetadata liquidity_pool_metadata = 2;
 * @return {?proto.tendermint.liquidity.LiquidityPoolMetadata}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.getLiquidityPoolMetadata = function() {
  return /** @type{?proto.tendermint.liquidity.LiquidityPoolMetadata} */ (
    jspb.Message.getWrapperField(this, liquidity_pb.LiquidityPoolMetadata, 2));
};


/**
 * @param {?proto.tendermint.liquidity.LiquidityPoolMetadata|undefined} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
*/
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.setLiquidityPoolMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.clearLiquidityPoolMetadata = function() {
  return this.setLiquidityPoolMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.hasLiquidityPoolMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LiquidityPoolBatch liquidity_pool_batch = 3;
 * @return {?proto.tendermint.liquidity.LiquidityPoolBatch}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.getLiquidityPoolBatch = function() {
  return /** @type{?proto.tendermint.liquidity.LiquidityPoolBatch} */ (
    jspb.Message.getWrapperField(this, liquidity_pb.LiquidityPoolBatch, 3));
};


/**
 * @param {?proto.tendermint.liquidity.LiquidityPoolBatch|undefined} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
*/
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.setLiquidityPoolBatch = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.clearLiquidityPoolBatch = function() {
  return this.setLiquidityPoolBatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.hasLiquidityPoolBatch = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated BatchPoolDepositMsg batch_pool_deposit_msgs = 4;
 * @return {!Array<!proto.tendermint.liquidity.BatchPoolDepositMsg>}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.getBatchPoolDepositMsgsList = function() {
  return /** @type{!Array<!proto.tendermint.liquidity.BatchPoolDepositMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, liquidity_pb.BatchPoolDepositMsg, 4));
};


/**
 * @param {!Array<!proto.tendermint.liquidity.BatchPoolDepositMsg>} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
*/
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.setBatchPoolDepositMsgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tendermint.liquidity.BatchPoolDepositMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tendermint.liquidity.BatchPoolDepositMsg}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.addBatchPoolDepositMsgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tendermint.liquidity.BatchPoolDepositMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.clearBatchPoolDepositMsgsList = function() {
  return this.setBatchPoolDepositMsgsList([]);
};


/**
 * repeated BatchPoolWithdrawMsg batch_pool_withdraw_msgs = 5;
 * @return {!Array<!proto.tendermint.liquidity.BatchPoolWithdrawMsg>}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.getBatchPoolWithdrawMsgsList = function() {
  return /** @type{!Array<!proto.tendermint.liquidity.BatchPoolWithdrawMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, liquidity_pb.BatchPoolWithdrawMsg, 5));
};


/**
 * @param {!Array<!proto.tendermint.liquidity.BatchPoolWithdrawMsg>} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
*/
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.setBatchPoolWithdrawMsgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tendermint.liquidity.BatchPoolWithdrawMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tendermint.liquidity.BatchPoolWithdrawMsg}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.addBatchPoolWithdrawMsgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tendermint.liquidity.BatchPoolWithdrawMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.clearBatchPoolWithdrawMsgsList = function() {
  return this.setBatchPoolWithdrawMsgsList([]);
};


/**
 * repeated BatchPoolSwapMsg batch_pool_swap_msgs = 6;
 * @return {!Array<!proto.tendermint.liquidity.BatchPoolSwapMsg>}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.getBatchPoolSwapMsgsList = function() {
  return /** @type{!Array<!proto.tendermint.liquidity.BatchPoolSwapMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, liquidity_pb.BatchPoolSwapMsg, 6));
};


/**
 * @param {!Array<!proto.tendermint.liquidity.BatchPoolSwapMsg>} value
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
*/
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.setBatchPoolSwapMsgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tendermint.liquidity.BatchPoolSwapMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tendermint.liquidity.BatchPoolSwapMsg}
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.addBatchPoolSwapMsgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tendermint.liquidity.BatchPoolSwapMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord} returns this
 */
proto.tendermint.liquidity.LiquidityPoolRecord.prototype.clearBatchPoolSwapMsgsList = function() {
  return this.setBatchPoolSwapMsgsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tendermint.liquidity.GenesisState.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.liquidity.GenesisState.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.liquidity.GenesisState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.liquidity.GenesisState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.GenesisState.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && liquidity_pb.Params.toObject(includeInstance, f),
    liquidityPoolRecordsList: jspb.Message.toObjectList(msg.getLiquidityPoolRecordsList(),
    proto.tendermint.liquidity.LiquidityPoolRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.liquidity.GenesisState}
 */
proto.tendermint.liquidity.GenesisState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.liquidity.GenesisState;
  return proto.tendermint.liquidity.GenesisState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.liquidity.GenesisState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.liquidity.GenesisState}
 */
proto.tendermint.liquidity.GenesisState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liquidity_pb.Params;
      reader.readMessage(value,liquidity_pb.Params.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 2:
      var value = new proto.tendermint.liquidity.LiquidityPoolRecord;
      reader.readMessage(value,proto.tendermint.liquidity.LiquidityPoolRecord.deserializeBinaryFromReader);
      msg.addLiquidityPoolRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.liquidity.GenesisState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.liquidity.GenesisState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.liquidity.GenesisState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.liquidity.GenesisState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      liquidity_pb.Params.serializeBinaryToWriter
    );
  }
  f = message.getLiquidityPoolRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tendermint.liquidity.LiquidityPoolRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional Params params = 1;
 * @return {?proto.tendermint.liquidity.Params}
 */
proto.tendermint.liquidity.GenesisState.prototype.getParams = function() {
  return /** @type{?proto.tendermint.liquidity.Params} */ (
    jspb.Message.getWrapperField(this, liquidity_pb.Params, 1));
};


/**
 * @param {?proto.tendermint.liquidity.Params|undefined} value
 * @return {!proto.tendermint.liquidity.GenesisState} returns this
*/
proto.tendermint.liquidity.GenesisState.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.liquidity.GenesisState} returns this
 */
proto.tendermint.liquidity.GenesisState.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.liquidity.GenesisState.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LiquidityPoolRecord liquidity_pool_records = 2;
 * @return {!Array<!proto.tendermint.liquidity.LiquidityPoolRecord>}
 */
proto.tendermint.liquidity.GenesisState.prototype.getLiquidityPoolRecordsList = function() {
  return /** @type{!Array<!proto.tendermint.liquidity.LiquidityPoolRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tendermint.liquidity.LiquidityPoolRecord, 2));
};


/**
 * @param {!Array<!proto.tendermint.liquidity.LiquidityPoolRecord>} value
 * @return {!proto.tendermint.liquidity.GenesisState} returns this
*/
proto.tendermint.liquidity.GenesisState.prototype.setLiquidityPoolRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tendermint.liquidity.LiquidityPoolRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tendermint.liquidity.LiquidityPoolRecord}
 */
proto.tendermint.liquidity.GenesisState.prototype.addLiquidityPoolRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tendermint.liquidity.LiquidityPoolRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tendermint.liquidity.GenesisState} returns this
 */
proto.tendermint.liquidity.GenesisState.prototype.clearLiquidityPoolRecordsList = function() {
  return this.setLiquidityPoolRecordsList([]);
};


goog.object.extend(exports, proto.tendermint.liquidity);
